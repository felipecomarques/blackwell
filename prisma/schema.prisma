generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EMPLOYEE
  CLIENT
}

enum Gender {
  male
  female
  nonbinary
  other
}

model Clinician {
  id          String    @id @default(uuid())
  name        String
  surname     String
  slug        String    @unique
  gender      Gender
  occupation  String
  phoneNumber String    @map("phone_number")
  email       String    @unique
  password    String
  role        UserRole  @default(EMPLOYEE)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  consultations Consultation[]

  @@map("clinicians")
}

model Patient {
  id                       String    @id @default(uuid())
  name                     String
  surname                  String
  slug                     String    @unique
  gender                   Gender
  birthDate                DateTime  @map("birth_date")
  phoneNumber              String    @map("phone_number")
  universalMedicalRecordId String?   @unique @map("universal_medical_record_id")
  email                    String    @unique
  password                 String
  role                     UserRole  @default(CLIENT)
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime? @updatedAt @map("updated_at")

  Consultation           Consultation[]
  UniversalMedicalRecord UniversalMedicalRecord? @relation("record", fields: [universalMedicalRecordId], references: [id])

  @@map("patients")
}

model Consultation {
  id                       String    @id @default(uuid())
  room                     Int
  appointmentDate          DateTime  @map("appointment_date")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime? @updatedAt @map("updated_at")
  clinicianId              String    @map("clinician_id")
  patientId                String    @map("patient_id")
  universalMedicalRecordId String    @map("universal_medical_record_id")

  clinician              Clinician              @relation(fields: [clinicianId], references: [id])
  patient                Patient                @relation(fields: [patientId], references: [id])
  UniversalMedicalRecord UniversalMedicalRecord @relation(fields: [universalMedicalRecordId], references: [id])

  @@map("consultations")
}

model UniversalMedicalRecord {
  id                     String    @id @default(uuid())
  patientId              String    @unique @map("patient_id")
  consultationId         String[]  @map("consultations_ids")
  profession             String?
  address                String?
  city                   String?
  state                  String?
  emergencyContactEmail  String?   @map("emergency_contact_email")
  emergencyContactNumber String?   @map("emergency_contact_number")
  cpf                    String?
  allergies              String?
  maritalStatus          String?   @map("marital_status")
  height                 Float?
  weight                 Float?
  diagnosis              String[]
  medicationsInUse       String[]  @map("medications_in_use")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime? @updatedAt @map("updated_at")

  Consultation Consultation[]
  Patient      Patient?       @relation("record")

  @@map("universal_medical_records")
}

model Notification {
  id            String    @id @default(uuid())
  recipientId   String    @map("recipient_id")
  title         String
  content       String
  readAt        DateTime? @map("read_at")
  recipientType UserRole  @map("recipient_type")
  createdAt     DateTime  @default(now()) @map("created_at")

  @@map("notifications")
}
